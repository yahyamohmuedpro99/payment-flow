// Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Roles Enum
enum UserRole {
  USER
  MERCHANT
}

// User Model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // Hashed with bcrypt
  role      UserRole @default(USER)
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  isActive  Boolean  @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  wallet   Wallet?
  products Product[] // If merchant
  orders   Order[]   // Orders placed by user

  @@map("users")
}

// Wallet Model
model Wallet {
  id       String  @id @default(uuid())
  balance  Decimal @default(0) @db.Decimal(12, 2)
  currency String  @default("USD") @db.VarChar(3)
  isLocked Boolean @default(false) @map("is_locked")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  transactions WalletTransaction[]

  @@map("wallets")
}

// Transaction Types
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  EARNING
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

// Wallet Transaction Model (Immutable Audit Log)
model WalletTransaction {
  id     String            @id @default(uuid())
  type   TransactionType
  status TransactionStatus @default(COMPLETED)

  amount        Decimal @db.Decimal(12, 2)
  balanceBefore Decimal @map("balance_before") @db.Decimal(12, 2)
  balanceAfter  Decimal @map("balance_after") @db.Decimal(12, 2)
  currency      String  @default("USD") @db.VarChar(3)

  description String? @db.Text

  // Reference to related entities
  referenceType String? @map("reference_type") @db.VarChar(50)
  referenceId   String? @map("reference_id")

  // JSON metadata for additional context
  metadata Json?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String @map("wallet_id")

  @@index([walletId, createdAt])
  @@index([type, status])
  @@map("wallet_transactions")
}

// Product Model
model Product {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String? @db.Text
  price       Decimal @db.Decimal(12, 2)
  currency    String  @default("USD") @db.VarChar(3)

  availableUnits Int     @map("available_units")
  initialUnits   Int     @map("initial_units")
  isActive       Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  merchant   User   @relation(fields: [merchantId], references: [id])
  merchantId String @map("merchant_id")

  orders Order[]

  @@index([merchantId, createdAt])
  @@map("products")
}

// Payment Methods
enum PaymentMethod {
  WALLET
  GATEWAY
}

// Order Statuses
enum OrderStatus {
  PENDING
  PAYMENT_PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Order Model
model Order {
  id            String        @id @default(uuid())
  paymentMethod PaymentMethod @map("payment_method")
  status        OrderStatus   @default(PENDING)

  amount   Decimal @db.Decimal(12, 2)
  currency String  @default("USD") @db.VarChar(3)

  // Stripe payment fields
  stripeSessionId       String? @map("stripe_session_id")
  stripePaymentIntentId String? @map("stripe_payment_intent_id")

  // Idempotency key to prevent duplicate orders
  idempotencyKey String? @unique @map("idempotency_key")

  notes String? @db.Text

  // JSON metadata
  metadata Json?

  completedAt   DateTime? @map("completed_at")
  failedAt      DateTime? @map("failed_at")
  failureReason String?   @map("failure_reason") @db.Text

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  merchantId String @map("merchant_id") // Denormalized for queries

  @@index([userId, createdAt])
  @@index([merchantId, createdAt])
  @@index([status, createdAt])
  @@map("orders")
}
